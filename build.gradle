/*
 * Copyright 2013-2014 SmartBear Software
 * Copyright 2014-2015 The TestFX Contributors
 *
 * Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the
 * European Commission - subsequent versions of the EUPL (the "Licence"); You may
 * not use this work except in compliance with the Licence.
 *
 * You may obtain a copy of the Licence at:
 * http://ec.europa.eu/idabc/eupl
 *
 * Unless required by applicable law or agreed to in writing, software distributed
 * under the Licence is distributed on an "AS IS" basis, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the Licence for the
 * specific language governing permissions and limitations under the Licence.
 */

import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

// task to add gradle wrapper files.
task wrapper(type: Wrapper) {
    gradleVersion = "2.3"
}

// task to print gradle and groovy versions.
task printVersions << {
    println "Gradle version: " + project.gradle.gradleVersion
    println "Groovy version: " + GroovySystem.version
}

allprojects { project ->
    // task to create main and test source directories.
    task createSourceDirs << {
        if (project != rootProject) {
            sourceSets*.allSource.srcDirs*.each { it.mkdirs() }
            sourceSets*.resources.srcDirs*.each { it.mkdirs() }
        }
    }
}

// create build date and time.
import java.text.SimpleDateFormat
Date buildTimeAndDate = new Date()
ext {
    buildDate = new SimpleDateFormat("yyyy-MM-dd").format(buildTimeAndDate)
    buildTime = new SimpleDateFormat("HH:mm:ss.SSSZ").format(buildTimeAndDate)
}

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath "nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.1"
    }
}

apply plugin: "base"
apply plugin: "idea"

subprojects { subproject ->
    // provide java configurations and tasks.
    apply plugin: "java"

    //apply from: rootProject.file("gradle/check-checkstyle.gradle")
    //apply from: rootProject.file("gradle/check-findbugs.gradle")
    //apply from: rootProject.file("gradle/check-jdepend.gradle")
    apply from: rootProject.file("gradle/check-license.gradle")

    apply from: rootProject.file("gradle/publish-jar.gradle")
    apply from: rootProject.file("gradle/publish-maven.gradle")
    apply from: rootProject.file("gradle/publish-bintray.gradle")

    task sourceJar(type: Jar) {
        group "Build"
        description "An archive of the source code"
        classifier "sources"
        from sourceSets.main.allJava
    }

    task javadocJar(type: Jar) {
        group "Build"
        description "An archive of the javadoc"
        classifier "javadoc"
        from javadoc
    }

    jar.finalizedBy sourceJar
    jar.finalizedBy javadocJar

    artifacts {
        sourceJar
        javadocJar
    }

    // source code compatible to java 8.
    subproject.tasks.withType(JavaCompile) {
        sourceCompatibility = "1.8"
        targetCompatibility = "1.8"
    }

    // configure javadoc task.
    if (JavaVersion.current().isJava8Compatible()) {
        tasks.withType(Javadoc) {
            options.addStringOption("Xdoclint:none", "-quiet")
        }
    }

    // use utf-8 encoding for java compile.
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    // use test logging.
    test {
        reports.html.enabled = false
        testLogging {
            // set options for log level LIFECYCLE
            events TestLogEvent.PASSED, TestLogEvent.SKIPPED,
                    TestLogEvent.FAILED, TestLogEvent.STANDARD_OUT
            showExceptions true
            exceptionFormat TestExceptionFormat.FULL
            showCauses true
            showStackTraces true

            // set options for log level DEBUG and INFO
            debug {
                events TestLogEvent.STARTED, TestLogEvent.PASSED,
                        TestLogEvent.SKIPPED, TestLogEvent.FAILED,
                        TestLogEvent.STANDARD_OUT, TestLogEvent.STANDARD_ERROR
            }
            info.events = debug.events
        }
    }
}

evaluationDependsOnChildren()

subprojects { subproject ->
    // maven repositories for dependencies.
    repositories {
        if (project.hasProperty("useMavenLocal")) {
            mavenLocal()
        }
        jcenter()
    }

    // configure javadoc task.
    javadoc {
        excludes = ["**/*.html", "META-INF/**"]
        options.use         = true
        options.splitIndex  = true
        options.encoding    = "UTF-8"
        options.author      = true
        options.version     = subproject.sourceCompatibility
        options.windowTitle = "${subproject.pomDescription} ${version} API"
        options.docTitle    = "${subproject.pomDescription} ${version} API"
        options.footer      = project.javadocFooter
        options.links       = [
            "http://docs.oracle.com/javase/8/docs/api/",
            "http://docs.oracle.com/javase/8/javafx/api/"
        ]
    }
}

task aggregateJavadoc(type: Javadoc) {
    group "Documentation"
    description "Generates aggregated Javadoc API documentation."

    def javadocSubprojects = subprojects.findAll { project ->
        project.sourceSets.main.allJava.matching { include "org/testfx/**" }.with { !it.empty }
    }

    source javadocSubprojects.collect { project ->
        project.sourceSets.main.allJava
    }
    classpath = files(javadocSubprojects.collect { project ->
        project.sourceSets.main.compileClasspath
    })

    title "${project.javadocName} ${project.version} API"
    destinationDir = new File(projectDir, "docs/javadoc")

    configure(options) {
        use = true
        splitIndex = true
        encoding = "UTF-8"
        links = [
            "http://docs.oracle.com/javase/8/docs/api/",
            "http://docs.oracle.com/javase/8/javafx/api/"
        ]
    }

    // disable java 8 overly pedantic lint checking.
    if (JavaVersion.current().isJava8Compatible()) {
        options.addStringOption("Xdoclint:none", "-quiet")
    }

    doFirst {
        project.delete(destinationDir)
        logger.info "Title    : ${options.windowTitle}"
        logger.info "Destdir  : ${destinationDir}"
    }
}

// configure java jdk and language level in idea.
idea {
    project {
        jdkName "1.8"
        languageLevel "1.8"
    }
}
