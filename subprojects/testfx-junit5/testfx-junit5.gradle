/*
 * Copyright 2013-2014 SmartBear Software
 * Copyright 2014-2015 The TestFX Contributors
 *
 * Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the
 * European Commission - subsequent versions of the EUPL (the "Licence"); You may
 * not use this work except in compliance with the Licence.
 *
 * You may obtain a copy of the Licence at:
 * http://ec.europa.eu/idabc/eupl
 *
 * Unless required by applicable law or agreed to in writing, software distributed
 * under the Licence is distributed on an "AS IS" basis, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the Licence for the
 * specific language governing permissions and limitations under the Licence.
 */
ext.pomDescription = 'TestFX JUnit5'
ext.moduleName = 'org.testfx.junit5'

repositories {
    jcenter()
}

test {
  useJUnitPlatform()
}

dependencies {
    compile project(":testfx-core")

    // Removes compile warnings about missing enums.
    compile('org.apiguardian:apiguardian-api:1.0.0')

    compile 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.3.1'

    if (JavaVersion.current().isJava12Compatible()) {
        testCompile "org.testfx:openjfx-monocle:jdk-12+14"
    } else if (JavaVersion.current().isJava11Compatible()) {
        testCompile "org.testfx:openjfx-monocle:jdk-11+26"
    } else if (JavaVersion.current().isJava10Compatible() &&
            System.getProperty("java.vm.name").toLowerCase().contains("openjdk")) {
        testCompile "org.testfx:openjfx-monocle:jdk-11+26"
    } else if (JavaVersion.current().isJava9Compatible()) {
        testCompile "org.testfx:openjfx-monocle:jdk-9+181"
    } else {
        testCompile "org.testfx:openjfx-monocle:8u76-b04"
    }
}

sourceSets {
    if (!JavaVersion.current().isJava9Compatible()) {
        main {
            java {
                exclude '**/module-info.java'
            }
        }
    }
}

compileJava {
    if (JavaVersion.current().isJava9Compatible()) {
        inputs.property("moduleName", moduleName)
        doFirst {
            options.compilerArgs = [
                    '--module-path', classpath.asPath,
            ]
            classpath = files()
        }

        javadoc {
            exclude "**/module-info.java"
            options.addStringOption('-module-path', classpath.asPath)
        }
    }
}

compileTestJava {
    if (JavaVersion.current().isJava9Compatible()) {
        inputs.property("moduleName", moduleName)
        doFirst {
            options.compilerArgs = [
                    '--module-path', classpath.asPath,
                    '--add-modules', 'org.junit.jupiter.api,javafx.controls',
                    '--add-reads', "$moduleName=org.junit.jupiter.api",
                    '--add-reads', "$moduleName=javafx.controls",
                    '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,
            ]
            classpath = files()
        }
    }
}

jar {
    inputs.property("moduleName", moduleName)

    manifest {
        attributes('Automatic-Module-Name': moduleName)
    }
}
